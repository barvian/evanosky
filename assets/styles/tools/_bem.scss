// BEM
// ===

$breakpoints: () !default;

$bem-element-separator: '__' !default;
$bem-modifier-separator: '--' !default;
$bem-condition-separator: '\\@' !default;

$_currentBlock: null; $_currentMod: null; $_currentCond: null;

@function b($block) {
  @return unquote(".#{$block}");
}
@function be($block, $element) {
  @return unquote(".#{$block + $bem-element-separator + $element}");
}
@function bm($block, $modifier) {
  @return unquote(".#{$block + $bem-modifier-separator + $modifier}");
}
@function bc($block, $element) {
  @return unquote(".#{$block + $bem-condition-separator + $element}");
}
@function bem($block, $element, $modifier) {
  @return selector-nest(bm($block, $modifier), be($block, $element));
}

@mixin b($block, $conditional: false) {
  $_currentBlock: $block !global;
  @if $conditional {
    @if $conditional == true { $conditional: map-keys($breakpoints); }
    @each $condition in $conditional {
      @include c($condition) {
        @content;
      }
    }
  } @else {
    #{b($block)} {
      @content;
    }
  }
  $_currentBlock: null !global;
}

@mixin e($element, $child: false) {
  @if $_currentMod or $_currentCond or $child {
    & #{if($child, '> ', '') + be($_currentBlock, $element)} {
      @content;
    }
  } @else {
    &#{$bem-element-separator + $element} {
      @content;
    }
  }
}

@mixin m($modifier) {
  $_currentMod: $modifier !global;
  &#{$bem-modifier-separator + $modifier} {
    @content;
  }
  $_currentMod: null !global;
}

@mixin c($condition, $query: true) {
  $_currentCond: $condition !global;
  @if $query == true { $query: $condition; }
  @at-root { #{bc($_currentBlock, $condition)} {
    @if $query {
      @include query($query) { @content; }
    } @else {
      @content;
    }
  } }
  $_currentCond: null !global;
}
